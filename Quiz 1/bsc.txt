# Setup
c-->from imp import reload
c-->import q1solution
c-->reload(q1solution)
c-->from q1solution import compose, self_compose, sorted1, sorted2, sorted3, points, first_quad, called, got_called, invert
c-->from predicate import is_prime
c-->from goody import irange

# Test compose/self_compose
c-->c = compose(lambda x : 2*x, lambda x : x+1) 
e-->[c(a) for a in irange(0,10)]-->[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]
c-->c = compose(lambda x : x+1, lambda x : 2*x) 
e-->[c(a) for a in irange(0,10)]-->[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]
c-->c = compose(lambda x : x+x, lambda x : x[1:]) 
e-->[c(a) for a in ['a','ab','abc','abcd']]-->['', 'bb', 'bcbc', 'bcdbcd']
c-->c = compose(lambda x : x[1:], lambda x : x+x) 
e-->[c(a) for a in ['a','ab','abc','abcd']]-->['a', 'bab', 'bcabc', 'bcdabcd']
c-->sc = [self_compose(lambda x : x+x,n) for n in irange(0,5)]
e-->[f('*') for f in sc]-->['*', '**', '****', '********', '****************', '********************************']
c-->sc = [self_compose(lambda x : 2**x,n) for n in irange(0,5)]
e-->[f(0) for f in sc]-->[0, 1, 2, 4, 16, 65536]
^-->sc = self_compose(lambda x : 2**x,-1)-->AssertionError

# Test sorted1/sorted2/sorted3
c-->ps1 = {1:(1,1),2:(3,2),3:(3,-3),4:(-3,4),5:(-2,-2)} 
c-->ps2 = {1:(0,5), 2:(2,3), 3:(-3,2), 4:(-5,1), 5:(-3,-2), 6:(4,-2), 7:(5,0), 8:(0,-5)}  
e-->sorted1(ps1)-->[(4, (-3, 4)), (5, (-2, -2)), (1, (1, 1)), (2, (3, 2)), (3, (3, -3))]
e-->sorted1(ps2)-->[(4, (-5, 1)), (3, (-3, 2)), (5, (-3, -2)), (1, (0, 5)), (8, (0, -5)), (2, (2, 3)), (6, (4, -2)), (7, (5, 0))]
e-->sorted2(ps1)-->[(-2, -2), (3, -3), (3, 2), (1, 1), (-3, 4)]
e-->sorted2(ps2)-->[(-3, -2), (0, -5), (4, -2), (5, 0), (2, 3), (0, 5), (-3, 2), (-5, 1)]
e-->sorted3(ps1)-->[5, 3, 2, 1, 4]
e-->sorted3(ps2)-->[5, 8, 6, 7, 2, 1, 3, 4]

# Test points/first_quad
e-->points(ps1)-->[(1, 1), (3, 2), (3, -3), (-3, 4), (-2, -2)]
e-->points(ps2)-->[(0, 5), (2, 3), (-3, 2), (-5, 1), (-3, -2), (4, -2), (5, 0), (0, -5)]
==-->first_quad(ps1)-->{(3, 2): 3.605551275463989, (1, 1): 1.4142135623730951}
==-->first_quad(ps2)-->{(2, 3): 3.605551275463989, (0, 5): 5.0, (5, 0): 5.0}

# Testing called/got_called
c-->db1 = {'a':{'b':2,'c':1},'b':{'a':3,'c':1},'c':{'a':1,'d':2}}
c-->db2 = {'a': {'b': 2, 'c': 1, 'e':2}, 'b': {'a': 3, 'c': 1}, 'c': {'a': 1, 'd': 2, 'e':6}, 'e': {'a': 3, 'c': 2, 'd':1}}
==-->called(db1)-->{'a':3,'b':4,'c':3}
==-->called(db2)-->{'b': 4, 'e': 6, 'a': 5, 'c': 9}
==-->got_called(db1)-->{'b': 2, 'a': 4, 'c': 2, 'd': 2}
==-->got_called(db2)-->{'b': 2, 'a': 7, 'e': 8, 'c': 4, 'd': 3}

# Test invert
==-->invert(db1)-->{'a':{'b':3,'c':1},'b':{'a':2},'c':{'a':1,'b':1},'d':{'c':2}}
==-->invert(db2)-->{'b': {'a': 2}, 'c': {'b': 1, 'e': 2, 'a': 1}, 'd': {'c': 2, 'e': 1}, 'e': {'c': 6, 'a': 2}, 'a': {'b': 3, 'e': 3, 'c': 1}}