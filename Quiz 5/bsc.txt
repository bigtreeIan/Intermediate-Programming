# Setup
c-->from imp import reload
c-->import q5solution
c-->reload(q5solution)
c-->import predicate,random
c-->from functools import reduce
c-->from q5solution import separate, is_sorted, sort, compare, triple, peaks

# Test count
e-->separate(predicate.is_positive,[])-->([], [])
e-->separate(predicate.is_positive,[1, -3, -2, 4, 0, -1, 8])-->([1, 4, 8], [-3, -2, 0, -1])
e-->separate(predicate.is_prime,[i for i in irange(2,20)])-->([2, 3, 5, 7, 11, 13, 17, 19], [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20])
e-->separate(lambda x : len(x) <= 3,'to be or not to be that is the question'.split(' '))-->(['to', 'be', 'or', 'not', 'to', 'be', 'is', 'the'], ['that', 'question'])

# Test is_sorted
e-->is_sorted([])-->True
e-->is_sorted([1,2,3,4,5,6,7])-->True
e-->is_sorted([1,2,3,7,4,5,6])-->False
e-->is_sorted([1,2,3,4,5,6,5])-->False
e-->is_sorted([7,6,5,4,3,2,1])-->False

# Test sort
e-->sort([1,2,3,4,5,6,7])-->[1, 2, 3, 4, 5, 6, 7]
e-->sort([7,6,5,4,3,2,1])-->[1, 2, 3, 4, 5, 6, 7]
e-->sort([4,5,3,1,2,7,6])-->[1, 2, 3, 4, 5, 6, 7]
e-->sort([1,7,2,6,3,5,4])-->[1, 2, 3, 4, 5, 6, 7]
c-->l = [i+1 for i in range(30)]
c-->random.shuffle(l)
c-->l = sort(l)
e-->l-->[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]

# Test compare
e-->compare('','')-->=
e-->compare('','abc')--><
e-->compare('abc','')-->>
e-->compare('abc','abc')-->=
e-->compare('bc','abc')-->>
e-->compare('abc','bc')--><
e-->compare('aaaxc','aaabd')-->>
e-->compare('aaabd','aaaxc')--><

# Test triple and peaks
e-->reduce(triple,['a','b','c','d','e','f'],[[]])-->[['a', 'b', 'c'], ['b', 'c', 'd'], ['c', 'd', 'e'], ['d', 'e', 'f']]
e-->peaks([0,1,-1,3,8,4,3,5,4,3,8])-->[1, 8, 5]
e-->peaks([5,2,4,9,6,1,3,8,0,7])-->[9, 8]
e-->peaks([1,2,3,4,5])-->[]
e-->peaks([0,1])-->[]
e-->peaks(int(predicate.is_prime(p)) for p in irange(1,20))-->[1, 1, 1, 1, 1, 1]
